name: WebServer CI

#env:
#  AWS_REGION: us-east-1

on:
  pull_request:
    types:
      - closed
    branches: [ main ]

jobs:
  build:
    name: on-merge
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        sudo python3 -m pip install --upgrade pip
        sudo pip install -r requirements.txt

    - name: Run Tests
      run: |
        echo $GITHUB_REF
        echo ${{ github.event.number }}
        echo ${{ github.event.issue.number }}
        echo ${{ github.event.pull_request.number }}
        sudo python3 manage.py test

    - name: Create Release Folder
      run: zip -r release.zip . -x ".git/*" ".github/*" ".idea/*"
    - name: Switch to Release Folder
      run: |
        ls -la
      shell: bash
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: us-east-1

          # validate templates
    - name: Validate Template
      uses: hashicorp/packer-github-actions@master
      with:
        command: validate
        arguments: -syntax-only
        target: ami.pkr.hcl

    - name: Packer Init 1
      uses: hashicorp/packer-github-actions@master
      with:
        command: init
        target: ami.pkr.hcl

          # build artifact
    - name: Build Artifact
      uses: hashicorp/packer-github-actions@master
      with:
        command: build
        arguments: -var=GITHUB_REF=${{ github.event.pull_request.number }} -color=false -on-error=abort
        target: ami.pkr.hcl
        working_directory: "."


    # update template configuration
    - name: Update template configuration
      run: |
        ASG=$(aws autoscaling describe-auto-scaling-instances --query 'AutoScalingInstances[?AutoScalingGroupName==`ec2-auto-scaling-group`].InstanceId' --output text)
        echo "********************$ASG*******************************"
        if [ "$ASG" != "" ]
        then
         echo Autoscaling group exists
         AMS_ID=$(aws ec2 describe-images --filters Name=name,Values=csye6225_${{ github.event.pull_request.number }} --query 'Images[0].[ImageId]' --output text)
         aws ec2 create-launch-template-version --launch-template-name "asg_launch_config" --source-version 1 --launch-template-data ImageId=$AMS_ID
        else
         echo Autoscaling does not exist
        fi

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
        AWS_DEFAULT_REGION: 'us-east-1'

    # update autoscaling group
    - name: update autoscaling group
      run: |
        ASG=$(aws autoscaling describe-auto-scaling-instances --query 'AutoScalingInstances[?AutoScalingGroupName==`ec2-auto-scaling-group`].InstanceId' --output text)
        if [ "$ASG" != "" ]
        then
         echo Autoscaling group exists
         aws autoscaling update-auto-scaling-group --auto-scaling-group-name ec2-auto-scaling-group --launch-template '{"LaunchTemplateName": "asg_launch_config", "Version": "$Latest"}'
        else
         echo Autoscaling does not exist
        fi

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
        AWS_DEFAULT_REGION: 'us-east-1'

    # update autoscaling group
    - name: refresh autoscaling instances
      run: |
        ASG=$(aws autoscaling describe-auto-scaling-instances --query 'AutoScalingInstances[?AutoScalingGroupName==`ec2-auto-scaling-group`].InstanceId' --output text)
        if [ "$ASG" != "" ]
        then
         echo Autoscaling group exists
         REFRESH_INSTANCE_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name ec2-auto-scaling-group --output text) 
         echo $REFRESH_INSTANCE_ID
         STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ec2-auto-scaling-group --instance-refresh-ids $REFRESH_INSTANCE_ID --query 'InstanceRefreshes[0].Status' --output text)
         count=1
         while [ "$STATUS" != "Successful" ]
          do
           echo "refresh status - $STATUS"
           sleep 60
           count=`expr $count + 1`
           if [ $count -eq 20 ]
           then
            echo "unable to update instance"
            exit 1
           fi
           STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ec2-auto-scaling-group --instance-refresh-ids $REFRESH_INSTANCE_ID --query 'InstanceRefreshes[0].Status' --output text)
          done
          echo $STATUS
        else
         echo Autoscaling does not exist
        fi

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
        AWS_DEFAULT_REGION: 'us-east-1'

#    - name: Run packer script file
#      run: |
#        ls -ltr
#        pwd
#        env
#        packer validate .
#        packer build ami.pkr.hcl
#      shell: bash






